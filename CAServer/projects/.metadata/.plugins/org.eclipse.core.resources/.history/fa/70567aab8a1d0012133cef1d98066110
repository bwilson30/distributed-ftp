package CA;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.math.BigInteger;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.cert.CertPath;
import java.security.cert.CertPathValidator;
import java.security.cert.CertPathValidatorException;
import java.security.cert.Certificate;
import java.security.cert.CertificateFactory;
import java.security.cert.PKIXCertPathValidatorResult;
import java.security.cert.PKIXParameters;
import java.security.cert.TrustAnchor;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;


import sun.security.rsa.RSAKeyPairGenerator;
import sun.security.x509.AlgorithmId;
import sun.security.x509.CertificateAlgorithmId;
import sun.security.x509.CertificateIssuerName;
import sun.security.x509.CertificateSerialNumber;
import sun.security.x509.CertificateSubjectName;
import sun.security.x509.CertificateValidity;
import sun.security.x509.X500Name;
import sun.security.x509.X509CertImpl;
import sun.security.x509.X509CertInfo;


public class CertificateAuthority {

	private static String keystoreFile = "../keyStoreFile.bin";
	private static String caAlias = "ROOT_ALIAS";
	private static char[] caPassword = "ece6102".toCharArray();
	
	
	public static void CreateCertificateKeys()
	{
		try{
			KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");
            //keyGen.initialize(1024, sr);
            KeyPair keypair = keyGen.generateKeyPair();
            PrivateKey privKey = keypair.getPrivate();
            PublicKey pubKey = keypair.getPublic();
      
		}
	    catch (java.security.NoSuchAlgorithmException e) {
	    }
	}
	
	
	public static X509Certificate ValidateCertificate(X509Certificate trust)
	{
		try{
		CertificateFactory cf = CertificateFactory.getInstance("X.509");
	    List<Certificate> mylist = new ArrayList<Certificate>();
	    //FileInputStream in = new FileInputStream(certpath);
	    //Certificate c = cf.generateCertificate(in);
	    mylist.add(trust);
        
	    CertPath cp = cf.generateCertPath(mylist);

	    //Certificate trust = cf.generateCertificate(in);
	    TrustAnchor anchor = new TrustAnchor((X509Certificate) trust, null);
	    PKIXParameters params = new PKIXParameters(Collections.singleton(anchor));
	    params.setRevocationEnabled(false);
	    CertPathValidator cpv = CertPathValidator.getInstance("PKIX");
	    PKIXCertPathValidatorResult result = (PKIXCertPathValidatorResult) cpv.validate(cp, params);
	    
	    if (trust instanceof X509Certificate) {
            X509Certificate x509cert = (X509Certificate)trust;
            return x509cert;
        }
	        return null;
		}
		catch(CertPathValidatorException cpx)
		{
			return null;
		}
        catch(Exception ex)
        {
        	return null;
        }
	}
	
	public static synchronized X509CertImpl GenerateClientCertificate(PublicKey clientKey)
	{
        try{
	    FileInputStream input = new FileInputStream(keystoreFile);
	    KeyStore keyStore = KeyStore.getInstance("JKS");
	    keyStore.load(input, caPassword);
	    input.close();

	    PrivateKey caPrivateKey = (PrivateKey) keyStore.getKey(caAlias, caPassword);
	    java.security.cert.Certificate caCert = keyStore.getCertificate(caAlias);

            

	    byte[] encoded = caCert.getEncoded();
	    X509CertImpl caCertImpl = new X509CertImpl(encoded);

	    X509CertInfo caCertInfo = (X509CertInfo) caCertImpl.get(X509CertImpl.NAME + "."
	        + X509CertImpl.INFO);

	    X500Name issuer = (X500Name) caCertInfo.get(X509CertInfo.SUBJECT + "."
	        + CertificateIssuerName.DN_NAME);

	    //java.security.cert.Certificate cert = keyStore.getCertificate(certToSignAlias);
	    
	    //encoded = cert.getEncoded();
	    encoded = clientKey.getEncoded();
	    
	    X509CertImpl certImpl = new X509CertImpl(encoded);
	    X509CertInfo certInfo = (X509CertInfo) certImpl
	        .get(X509CertImpl.NAME + "." + X509CertImpl.INFO);

	    Date firstDate = new Date();
	    Date lastDate = new Date(firstDate.getTime() + 3 * 24 * 60 * 60 * 1000L);
	    CertificateValidity interval = new CertificateValidity(firstDate, lastDate);
 
	    certInfo.set(X509CertInfo.VALIDITY, interval);

	    certInfo.set(X509CertInfo.SERIAL_NUMBER, new CertificateSerialNumber(
	        (int) (firstDate.getTime() / 1000)));

	    certInfo.set(X509CertInfo.ISSUER + "." + CertificateSubjectName.DN_NAME, issuer);

	    //certInfo.set("ClientName", clientName);
	    
	    AlgorithmId algorithm = new AlgorithmId(AlgorithmId.md5WithRSAEncryption_oid);
	    certInfo.set(CertificateAlgorithmId.NAME + "." + CertificateAlgorithmId.ALGORITHM, algorithm);
	    X509CertImpl newCert = new X509CertImpl(certInfo);
        
	    newCert.sign(caPrivateKey, "MD5WithRSA");
	    
	   
	    FileOutputStream output = new FileOutputStream(keystoreFile);
	    keyStore.store(output, caPassword);
	    output.close();
	    
	    return newCert;
        }
        catch(Exception evt)
        {
        	System.err.println("Can't create client certificate: "+evt.getMessage());
        	return null;
        }
	}
    
}
