package Encryption;

import java.io.FileInputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.security.AlgorithmParameterGenerator;
import java.security.AlgorithmParameters;
import java.security.KeyFactory;
import java.security.KeyStore;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.InvalidParameterSpecException;
import java.security.spec.X509EncodedKeySpec;
import java.util.Hashtable;

import javax.crypto.KeyAgreement;
import javax.crypto.SecretKey;
import javax.crypto.spec.DHParameterSpec;

public class Encrypt {
	private static char[] caPassword = "ece6102Client".toCharArray();
	private static String keystoreFile = "../keyStoreFile.bin";
	private static String clientAlias = null;
	private static String clientPassword = null;
	private static PublicKey pubKey;
	private static PrivateKey privKey;
	private static Socket socket;
	private static ObjectOutputStream out;
	private static ObjectInputStream in;
	public void GetKeys() throws Exception
	{
		if(clientAlias != null)
		{
		   FileInputStream input = new FileInputStream(keystoreFile);
	       KeyStore keyStore = KeyStore.getInstance("JKS");
	       keyStore.load(input, clientAlias.toCharArray());
	       input.close();
	       privKey = (PrivateKey) keyStore.getKey(clientAlias, caPassword);
	       pubKey  = (PublicKey) keyStore.getKey(clientAlias, caPassword);
	       
		}
	}
	public void GetCertificate()
	{
		
	}
	public static void initiate(String ipAddress, String username, String pwd, String serverIp)
	{
		clientAlias = username;
		
		try{
		socket = new Socket(serverIp,1001);
		out = new ObjectOutputStream(socket.getOutputStream());
		in = new ObjectInputStream(socket.getInputStream());
		if(socket != null)
		{
			Hashtable<String, byte[]> table = new Hashtable<String, byte[]>();
			table.put("authenticate", pubKey.getEncoded());
			out.writeObject(table);
		}
		}
		catch(Exception ex)
		{
			
		}
	}
	
	public static String GenerateParameterSet() {
	    try {
	        // Create the parameter generator for a 1024-bit DH key pair
	        AlgorithmParameterGenerator paramGen = AlgorithmParameterGenerator.getInstance("DH");
	        //paramGen.init(1024);
            paramGen.init(1024);
	        // Generate the parameters
	        AlgorithmParameters params = paramGen.generateParameters();
	        DHParameterSpec dhSpec
	            = (DHParameterSpec)params.getParameterSpec(DHParameterSpec.class);

	        // Return the three values in a string
	        return ""+dhSpec.getP()+","+dhSpec.getG()+","+dhSpec.getL();
	    } catch (NoSuchAlgorithmException e) {
	    } catch (InvalidParameterSpecException e) {
	    }
	    return null;
	}
	
    public static SecretKey InitiateProcess(byte[] key,PublicKey publicKey, PrivateKey privateKey)
    {
    	
	try {
	    // Get the generated public and private keys
		FileInputStream input = new FileInputStream(keystoreFile);
	    KeyStore keyStore = KeyStore.getInstance("JKS");
	    keyStore.load(input, clientPassword.toCharArray());

	    //PrivateKey privateKey = (PrivateKey) keyStore.getKey(caAlias, caPassword);
	    publicKey = (PublicKey)keyStore.getKey(clientAlias, clientPassword.toCharArray());

	    
		 
        // Get public key
        //publicKey = caCert.getPublicKey();
        Hashtable<String,byte[]> response = new Hashtable<String,byte[]>();
        
	    // Retrieve the public key bytes of the other party
        byte[] publicKeyBytes = key;

	    // Convert the public key bytes into a PublicKey object
	    X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(publicKeyBytes);
	    //KeyFactory keyFact = KeyFactory.getInstance("DH");
	    KeyFactory keyFact = KeyFactory.getInstance("DH");
	    publicKey = keyFact.generatePublic(x509KeySpec);

	    // Prepare to generate the secret key with the private key and public key of the other party
	    KeyAgreement ka = KeyAgreement.getInstance("DH");
	    ka.init(privateKey);
	    ka.doPhase(publicKey, true);

	    // Specify the type of key to generate;
	    // see Listing All Available Symmetric Key Generators
	    String algorithm = "DES";

	    // Generate the secret key
	    SecretKey secretKey = ka.generateSecret(algorithm);
        return secretKey;
	    
	} 
	catch (java.security.InvalidKeyException e) {
		return null;
	} 
	catch (java.security.spec.InvalidKeySpecException e) {
		System.out.println(e.getMessage());
		return null;
	} 

	catch (java.security.NoSuchAlgorithmException e) {
		return null;
	}
	catch(Exception evt)
	{
		return null;
	}
    }
}
