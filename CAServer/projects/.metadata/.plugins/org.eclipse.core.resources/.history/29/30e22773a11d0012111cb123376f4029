package Encryption;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.security.AlgorithmParameterGenerator;
import java.security.AlgorithmParameters;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.KeyStore;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.cert.X509Certificate;
import java.security.spec.InvalidParameterSpecException;
import java.security.spec.X509EncodedKeySpec;
import java.util.Hashtable;

import javax.crypto.Cipher;
import javax.crypto.KeyAgreement;
import javax.crypto.SealedObject;
import javax.crypto.SecretKey;
import javax.crypto.spec.DHParameterSpec;

public class Encrypt {
	private static String keystoreFile = "../keyStoreFileClient.bin";
	private static String keyPub = "pub";
	private static String keyPriv = "priv";
	private static String clientAlias = "client";
	private static String clientPassword = "ece6102";
	private static PublicKey pubKey;
	private static PrivateKey privKey;
	private static Socket socket;
	private static ObjectOutputStream out;
	private static ObjectInputStream in;
	private static Hashtable<String, byte[]> response;
	private static SecretKey caSecret, serverSecret;
	private static X509Certificate cert;
	private static SealedObject so;
	private static Cipher ecipher = null;
	private static Cipher dcipher = null;
	private static KeyStore keyStore;
	public static void GetKeys()
	{
		try{
		{
	       FileInputStream input = new FileInputStream(keystoreFile);
	       keyStore = KeyStore.getInstance("JKS");
	       keyStore.load(input, clientPassword.toCharArray());
	       input.close();
	       
	       privKey = (PrivateKey) keyStore.getKey(clientAlias, clientPassword.toCharArray());
		   java.security.cert.Certificate caCert = keyStore.getCertificate(clientAlias);
		   pubKey = caCert.getPublicKey();
	       
	       if(keyStore.isCertificateEntry(clientAlias))
	           cert = (X509Certificate) keyStore.getCertificate(clientAlias);
	       
	       dcipher = Cipher.getInstance("DES/ECB/PKCS5Padding");
		}
		
		}
		catch(Exception ex)
		{
			System.out.println(ex.toString());
		}
	}
	
	public static void initiate(String ipAddress, String username, String pwd, String serverIp)
	{
		//clientAlias = username;
		//clientPassword = pwd;
		GetKeys();
		try{
		socket = new Socket(serverIp,1001);
		out = new ObjectOutputStream(socket.getOutputStream());
		in = new ObjectInputStream(socket.getInputStream());
		if(socket != null)
		{
			Hashtable<String, byte[]> table = new Hashtable<String, byte[]>();
			KeyPairGenerator keyGen = KeyPairGenerator.getInstance("DH");
		    keyGen.initialize(Skip.sDHParameterSpec);
		    KeyPair   keypair = keyGen.genKeyPair();
		 
	    // Get the generated public and private keys
	       PrivateKey diffiePriv = keypair.getPrivate();
	       PublicKey  diffiePub = keypair.getPublic();
	       
			table.put("authenticate", diffiePub.getEncoded());
			out.writeObject(table);
			while(!socket.isClosed())
			{
				
				in = new ObjectInputStream(new BufferedInputStream(socket.getInputStream()));
				   response = (Hashtable)in.readObject();
				   if(response.containsKey("authenticateResponse"))
				   {
						byte []key = response.get("authenticateResponse");
						caSecret = InitiateProcess(key, diffiePriv, diffiePub);
						
						if(cert == null)
						{
							Hashtable hsend = new Hashtable();
							hsend.put("queryId", 1);
							ecipher = Cipher.getInstance("DES");
							ecipher.init(Cipher.ENCRYPT_MODE, caSecret);
							
							so = new SealedObject(hsend, ecipher);
							Hashtable request = new Hashtable();
					        request.put("message", so);
					        out.writeObject(request);
					        
					        in = new ObjectInputStream(new BufferedInputStream(socket.getInputStream()));
					        if(in.available() > 0)
					        {
					        	hsend = (Hashtable)in.readObject();
					        	dcipher.init(Cipher.DECRYPT_MODE, caSecret);
					        	so = (SealedObject)hsend.get("response");
					        	Hashtable certHash = (Hashtable)so.getObject(dcipher);
					        	X509Certificate cert = (X509Certificate)certHash.get("newCert");
					        	keyStore.setCertificateEntry(clientAlias, cert);
					        }
						}
						break;
				   }
				
			}
			
		}
		}
		catch(Exception ex)
		{
			System.out.println(ex.toString());
		}
	}
	
	public static String GenerateParameterSet() {
	    try {
	        // Create the parameter generator for a 1024-bit DH key pair
	        AlgorithmParameterGenerator paramGen = AlgorithmParameterGenerator.getInstance("DH");
	        //paramGen.init(1024);
            paramGen.init(1024);
	        // Generate the parameters
	        AlgorithmParameters params = paramGen.generateParameters();
	        DHParameterSpec dhSpec
	            = (DHParameterSpec)params.getParameterSpec(DHParameterSpec.class);

	        // Return the three values in a string
	        return ""+dhSpec.getP()+","+dhSpec.getG()+","+dhSpec.getL();
	    } catch (NoSuchAlgorithmException e) {
	    } catch (InvalidParameterSpecException e) {
	    }
	    return null;
	}
	
    public static SecretKey InitiateProcess(byte[] key, PrivateKey diffiePriv, PublicKey diffiePub)
    {
    	
	try {
		
       
	    // Get the generated public and private keys
		FileInputStream input = new FileInputStream(keystoreFile);
	    KeyStore keyStore = KeyStore.getInstance("JKS");
	    keyStore.load(input, clientPassword.toCharArray());

	    //PrivateKey privateKey = (PrivateKey) keyStore.getKey(caAlias, caPassword);
	    //diffiePub = (PublicKey)keyStore.getKey(clientAlias, clientPassword.toCharArray());

	    
		 
        // Get public key
        //publicKey = caCert.getPublicKey();
        Hashtable<String,byte[]> response = new Hashtable<String,byte[]>();
        
	    // Retrieve the public key bytes of the other party
        byte[] publicKeyBytes = key;

	    // Convert the public key bytes into a PublicKey object
	    X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(publicKeyBytes);
	    //KeyFactory keyFact = KeyFactory.getInstance("DH");
	    KeyFactory keyFact = KeyFactory.getInstance("DH");
	    diffiePub = keyFact.generatePublic(x509KeySpec);

	    // Prepare to generate the secret key with the private key and public key of the other party
	    KeyAgreement ka = KeyAgreement.getInstance("DH");
	    ka.init(diffiePriv);
	    ka.doPhase(diffiePub, true);

	    // Specify the type of key to generate;
	    // see Listing All Available Symmetric Key Generators
	    String algorithm = "DES";

	    // Generate the secret key
	    SecretKey secretKey = ka.generateSecret(algorithm);
        return secretKey;
	    
	} 
	catch (java.security.InvalidKeyException e) {
		return null;
	} 
	catch (java.security.spec.InvalidKeySpecException e) {
		System.out.println(e.getMessage());
		return null;
	} 

	catch (java.security.NoSuchAlgorithmException e) {
		return null;
	}
	catch(Exception evt)
	{
		return null;
	}
    }
    public static void main(String args[])
    {
    	initiate("","client","banji","127.0.0.1");
    }
}
